<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DC</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 05 Jul 2020 23:04:59 +1000</pubDate>
    <lastBuildDate>Sun, 05 Jul 2020 23:04:59 +1000</lastBuildDate>
    <generator>Jekyll v4.1.1</generator>
    
      <item>
        <title>美国的两种价值观？</title>
        <description>美国有两种价值观，共和党和民主党则选择分别代表其中一边。</description>
        <pubDate>Sat, 13 Jun 2020 00:00:00 +1000</pubDate>
        <link>http://localhost:4000/2020/06/13/the-difference-of-the-parties-of-US/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/06/13/the-difference-of-the-parties-of-US/</guid>
        
        <category>Social</category>
        
        <category>news</category>
        
        <category>opinion</category>
        
        <category>us</category>
        
        
        <category>Social</category>
        
      </item>
    
      <item>
        <title>Markdown在线小工具</title>
        <description>Markdown 从诞生之初，就因为其轻量、简便，而被内容创造者所青睐。然而并不是所有的地方都支持直接书写并渲染 Markdown 格式的文档，也并不是所有利用 Markdown 生成内容都是那么方便。接下来，我来介绍下面这几个在线的小工具，来帮助你更方便地排版 Markdown 文章。</description>
        <pubDate>Thu, 11 Jun 2020 00:00:00 +1000</pubDate>
        <link>http://localhost:4000/2020/06/11/markdown-online-tools/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/06/11/markdown-online-tools/</guid>
        
        <category>Tools</category>
        
        <category>Markdwon</category>
        
        
        <category>Tools</category>
        
      </item>
    
      <item>
        <title>介绍一个学习方法-回音法</title>
        <description>学习任何一种语言要先从模仿开始。先听native speaker都怎么说，才能自己说出一口流利又正确的英文。也许你听过shadowing，意即“跟读”，这是个满普遍的精进听力口语方法。</description>
        <pubDate>Thu, 11 Jun 2020 00:00:00 +1000</pubDate>
        <link>http://localhost:4000/2020/06/11/another-blog-about-English/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/06/11/another-blog-about-English/</guid>
        
        <category>course</category>
        
        <category>study</category>
        
        
        <category>Study</category>
        
      </item>
    
      <item>
        <title>推荐一些值得看的在线课程</title>
        <description>一些值得看的在线公开课介绍，涉及法学、计算机、社会学、哲学、经济学、管理学、文学、语言学、传播学、政治学、医学和环境学方面。Enjoy~</description>
        <pubDate>Wed, 10 Jun 2020 00:00:00 +1000</pubDate>
        <link>http://localhost:4000/2020/06/10/online-course-to-see-later/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/06/10/online-course-to-see-later/</guid>
        
        <category>course</category>
        
        <category>study</category>
        
        <category>casualtime</category>
        
        
        <category>Study</category>
        
      </item>
    
      <item>
        <title>vscode 插件 markdown-schedule-snippet</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#起因&quot; id=&quot;markdown-toc-起因&quot;&gt;起因&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;起因&quot;&gt;起因&lt;/h2&gt;

不知道大家是怎样安排自己的日常计划的，我习惯是建立一个仓库，按照年/周记录在 markdown 里，平时这个仓库也写点简单的 demo，目录类似如下：

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;week
├── 2016
├── 2017
├── 2018
│   ├── 20180102.md
│   ├── 20180108.md
│   ├── 20180115.md
│   ├── 20180122.md
│   ├── 20180126.md
│   ├── ...
│   ├── ...
│   ├── ...
│   ├── 20181007.md
│   ├── pixi.md
│   ├── schedule.md
│   ├── temp.css
│   ├── temp.html
│   ├── temp.js
│   ├── temp.json
│   └── temp.md
├── package.json
└── yarn.lock
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 10 Oct 2018 00:00:00 +1100</pubDate>
        <link>http://localhost:4000/2018/10/10/vscode-plugin-schedule/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/10/10/vscode-plugin-schedule/</guid>
        
        <category>效率</category>
        
        <category>vscode</category>
        
        <category>markdown</category>
        
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>从设计师和开发的角度使用 lottie</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#简介&quot; id=&quot;markdown-toc-简介&quot;&gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;img src=&quot;https://gw.alicdn.com/tfs/TB1yLBduDqWBKNjSZFAXXanSpXa-800-600.gif&quot; alt=&quot;&quot; /&gt;

&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;

&lt;a href=&quot;https://airbnb.design/lottie/&quot;&gt;lottie&lt;/a&gt; 是一个可以轻易的给各种 native app 添加高质量动画的类库。可以在 iOS、Android 和 React Native 实时渲染 After Effects 动画，就像使用静态图片一样容易。上图即为 lottie 的 logo。

简单的说，lottie 动画制作的流程是，通过 Bodymovin 扩展将 AE 动画导出为 json 数据，然后再将这个 json 渲染在客户端或者 web 端。如下图：
</description>
        <pubDate>Mon, 10 Sep 2018 00:00:00 +1000</pubDate>
        <link>http://localhost:4000/2018/09/10/lottie/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/09/10/lottie/</guid>
        
        <category>动画</category>
        
        <category>CSS</category>
        
        <category>airbnb</category>
        
        <category>lottie</category>
        
        <category>JavaScript</category>
        
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>提升用户体验的前端动画</title>
        <description>
与其他开发人员不同的是，前端开发都是在端上游走舞者，直接与用户交流沟通，这就需要前端开发具有更敏锐的交互体验思考，或者能更精准地理解设计师们意图，将最佳的用户体验带给用户。优质的交互体验对于用户来说学习成本应该是极低的，都是非常自然的操作，却可以让用户感到畅快愉悦，甚至惊喜。本文将通过一个看似简单的 poplayer 来分析我在这其中通过思考做的体验优化，获得类似 native 的体验感。

&lt;img src=&quot;https://ws1.sinaimg.cn/large/7011d6cfgy1frx9jv0kpfj208w0fracu.jpg&quot; alt=&quot;&quot; /&gt;
</description>
        <pubDate>Fri, 01 Jun 2018 00:00:00 +1000</pubDate>
        <link>http://localhost:4000/2018/06/01/animation/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/06/01/animation/</guid>
        
        <category>动画</category>
        
        <category>手势</category>
        
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>前端如何写一个精确的倒计时</title>
        <description>
关于写倒计时大家可能都都比较熟悉，使用 setTimeout 或 setInterval 就可以搞定。几秒钟或者几分钟的倒计时这样写没有问题，但是如果是长时间的倒计时，这样写就会不准确。如果用户修改了他的设备时间，这样的倒计时就没有意义了。今天就说说写一个精确的倒计时的方法。

&lt;img src=&quot;https://img.alicdn.com/tfs/TB18QnlOpXXXXcVXpXXXXXXXXXX-388-256.png&quot; alt=&quot;&quot; /&gt;
</description>
        <pubDate>Fri, 25 Nov 2016 00:00:00 +1100</pubDate>
        <link>http://localhost:4000/2016/11/25/how-to-write-a-count-down/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/11/25/how-to-write-a-count-down/</guid>
        
        <category>countdown</category>
        
        <category>JavaScript</category>
        
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>使用 JavaScript 创建并下载文件</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#先上代码&quot; id=&quot;markdown-toc-先上代码&quot;&gt;先上代码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

本文将介绍如何使用 JavaScript 创建文件，并自动/手动将文件下载。这在导出原始数据时会比较方便。

&lt;h2 id=&quot;先上代码&quot;&gt;先上代码&lt;/h2&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * 创建并下载文件
 * @param  {String} fileName 文件名
 * @param  {String} content  文件内容
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createAndDownloadFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aTag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Blob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;aTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;download&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;aTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createObjectURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;blob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;aTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;revokeObjectURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;blob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

很简单对吧，直接调用这个方法，传入文件名和文件内容，程序新建 a 标签，新建 Blob 对象，将文件名赋给 a 标签，同时将 Blob 对象作为 Url 也赋给 a 标签，模拟点击事件，自动下载成功，最后再回收内存。下面我们来看看具体是怎么操作的。
</description>
        <pubDate>Tue, 22 Nov 2016 00:00:00 +1100</pubDate>
        <link>http://localhost:4000/2016/11/22/js-create-file-and-download/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/11/22/js-create-file-and-download/</guid>
        
        <category>文件</category>
        
        <category>下载</category>
        
        <category>JavaScript</category>
        
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>Fisher–Yates shuffle 洗牌算法</title>
        <description>
简单来说 Fisher–Yates shuffle 算法是一个用来将一个有限集合生成一个随机排列的算法（数组随机排序）。这个算法生成的随机排列是等概率的。同时这个算法非常高效。

本文主要介绍这个算法的来源、演变、原理。并举出一个例子为大家清晰的描述每次迭代过程。最后使用 JavaScript 代码将算法实现。

&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/7/7c/Riffle_shuffle.jpg/320px-Riffle_shuffle.jpg&quot; alt=&quot;&quot; /&gt;
</description>
        <pubDate>Sun, 16 Oct 2016 00:00:00 +1100</pubDate>
        <link>http://localhost:4000/2016/10/16/shuffle-algorithm/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/10/16/shuffle-algorithm/</guid>
        
        <category>算法</category>
        
        <category>shuffle</category>
        
        <category>乱序</category>
        
        <category>洗牌</category>
        
        
        <category>JavaScript</category>
        
      </item>
    
  </channel>
</rss>
